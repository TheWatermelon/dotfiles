# Reading colors.yml file from config dir
import yaml
with (config.configdir / 'colors.yml').open() as f:
	yaml_data = yaml.load(f)
	def dict_attrs(obj, path=''):
		if isinstance(obj, dict):
			for k, v in obj.items():
				yield from dict_attrs(v, '{}.{}'.format(path, k) if path else k)
		else:
			yield path, obj
	for k, v in dict_attrs(yaml_data):
		config.set(k, v)

# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
#c.editor.command = ['vim', '{file}', '+{line}']

# Encoding to use for the editor.
# Type: Encoding
c.editor.encoding = 'utf-8'

# Bindings for normal mode
config.bind('<Ctrl+Shift+p>', 'spawn --userscript qute-lastpass')
config.bind('<Backspace>', 'back')

# Bindings for insert mode
config.bind('<Ctrl+Shift+p>', 'spawn --userscript qute-lastpass', mode='insert')
